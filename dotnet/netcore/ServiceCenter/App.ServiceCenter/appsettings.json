{
  "Sers": {
    /* 消息队列配置 */
    "Mq": {
      "Config": {
        /* 后台处理消息的线程个数（单位个，默认2） */
        "workThreadCount": 8,

        /* 请求超时时间（单位ms，默认60000） */
        "requestTimeoutMs": 60000,


        //HeartBeat
        /* 心跳测试超时时间（单位ms，默认2000） */
        "heartBeatTimeoutMs": 10000,
        /* 心跳测试失败重试次数（单位次，默认3） */
        "heartBeatRetryCount": 10,
        /* 心跳测试时间间隔（单位ms，默认1000） */
        "heartBeatIntervalMs": 2000,

        /* Mq连接秘钥，用以验证连接安全性。服务端和客户端必须一致 */
        "secretKey": "SersSocketMq"
      },

      /* one mq is one channel.can be multiable */
      "ServerMqBuilder": [
        {
          // Socket.Iocp
          /* (x.1) mq type - Iocp */
          /* mq协议（同一个通讯协议可以兼容使用,相互通讯） */
          "protocol": "Socket.SersFile",
          /* the class of MqBuilder in assemblyFile  */
          "className": "Sers.Mq.Socket.Iocp.MqBuilder.ServerMqBuilder",


          /* (x.2) mq config */
          /* Mq 服务端 监听地址。若不指定则监听所有网卡。例如： "127.0.0.1"、"sersms.com"。*/
          //"host": "127.0.0.1",
          /* Mq 服务端 监听端口号。例如： 10345 */
          "port": 10345
        },
        {
          // Socket.ThreadWait
          /* (x.1) mq type - Socket */
          /* mq协议（同一个通讯协议可以兼容使用,相互通讯） */
          "protocol": "Socket.SersFile",
          /* the class of MqBuilder in assemblyFile  */
          //"className": "Sers.Mq.Socket.ThreadWait.MqBuilder.ServerMqBuilder",


          /* (x.2) mq config */
          /* Mq 服务端 监听地址。若不指定则监听所有网卡。例如： "127.0.0.1"、"sersms.com"。*/
          //"host": "127.0.0.1",
          /* Mq 服务端 监听端口号。例如： 10345 */
          "port": 10345
        },

        {
          // Zmq.ThreadWait
          /* (x.1) mq type */
          /* mq协议（同一个通讯协议可以兼容使用,相互通讯） */
          "protocol": "Zmq.SersFile",
          /* 在此Assembly中查找MqBuilder */
          "assemblyFile": "Sers.Mq.Zmq.ClrZmq.ThreadWait.dll",
          /* the class of MqBuilder in assemblyFile  */
          //"className": "Sers.Mq.Zmq.ClrZmq.ThreadWait.MqBuilder.ServerMqBuilder",


          /* (x.2) mq config */
          /* Mq 地址。例如： "tcp://*:10346" 、 "ipc://10346" */
          "endpoint": "tcp://*:10346"
        },
        {
          //Ipc.SharedMemory
          /* (x.1) mq type - Ipc.SharedMemory */
          /* mq协议（同一个通讯协议可以兼容使用,相互通讯） */
          "protocol": "Ipc.SharedMemory",
          /* 在此Assembly中查找MqBuilder */
          "assemblyFile": "Sers.Mq.Ipc.SharedMemory.dll",
          /* the class of MqBuilder in assemblyFile  */
          //"className": "Sers.Mq.Ipc.SharedMemory.MqBuilder.ServerMqBuilder",


          /* (x.2) mq config */
          /* Mq 共享内存名称。例如： "ipcTest" */
          "name": "ipcForStationDemo",
          /* Mq 共享内存节点个数。例如： 64 */
          "nodeCount": 128,
          /* Mq 共享内存节点大小。例如： 2048 */
          "nodeBufferSize": 102400
        },
        {
          /* (x.1) mq type - Ipc.SharedMemory */
          /* mq协议（同一个通讯协议可以兼容使用,相互通讯） */
          "protocol": "Ipc.SharedMemory",
          /* 在此Assembly中查找MqBuilder */
          "assemblyFile": "Sers.Mq.Ipc.SharedMemory.dll",
          /* the class of MqBuilder in assemblyFile  */
          //"className": "Sers.Mq.Ipc.SharedMemory.MqBuilder.ServerMqBuilder",

          /* (x.2) mq config */
          /* Mq 共享内存名称。例如： "ipcTest" */
          "name": "ipcForRobot",
          /* Mq 共享内存节点个数。例如： 64 */
          "nodeCount": 128,
          /* Mq 共享内存节点大小。例如： 2048 */
          "nodeBufferSize": 102400
        }
      ]
    },


    "Logger": {
      /* print the log to console. default:false  */
      "PrintToConsole": true
    },


    /* 序列化配置,可不指定 */
    "Serialization": {
      /* 序列化字符编码。可不指定，默认 UTF8。只可为 UTF7,UTF8,UTF32,ASCII,Unicode。 */
      "Encoding": "UTF8",

      /* 时间序列化格式。可不指定，默认 "yyyy-MM-dd HH:mm:ss" */
      "DateTimeFormat": "yyyy-MM-dd HH:mm:ss"
    },



    /* LocalApiService 配置,可不指定 */
    "LocalApiService": {

      /* 后台服务的线程个数（单位个，默认0,代表不开启服务）(appsettings.json :: Sers.LocalApiService.workThreadCount) */
      "workThreadCount": 1,


      ///* 是否 输出本地Api的调用信息到（ApiTrace）Log文件。默认:false */
      "PrintTrace": false,


      /* Sers内置api discovery */
      "SersApiDiscovery": {

        /* 默认站点名称，可多个,可不指定 */
        //"apiStationName": [ "_sys_" ],


        /* 服务发现配置（通过反射从此包中获取要注册的api，可多个,可不指定） */
        "DiscoveryConfig": []
      }
    },



    /* ServiceStation配置,可不指定 */
    "ServiceStation": {

      /* 自动上报cpu Usage。不指定则不上报 */
      "//UsageReporter": {
        /* 上报时间间隔（单位：秒） */
        "intervalSecond": 2
      },

      /* serviceStation站点信息 */
      "serviceStationInfo": {
        "serviceStationName": "ServiceCenter"
      }
    },



    "Api": {
      //调用api前的事件，可不指定
      "BeforeCallApi": [
        {
          //Bearer 在调用接口前，会获取 rpcData.http.headers.Authorization(格式为 "Bearer xxxxxx")，并作为参数调用接口api_verifyAt，把返回数据放到 rpcData.user.userInfo
          //"className": "Bearer",
          /* 验证at接口的地址 */
          "api_verifyAt": "/AuthCenter/account/verifyAt"
        },

        {
          //AccountInCookie 在调用接口前，会获取 rpcData.http.headers.Cookie(格式为 "user=xxx;c=7")中的user，在账号列表中比对userToken，回写 CallerSource(rpcData.caller.source) 和 userInfo(rpcData.user.userInfo)
          //"className": "AccountInCookie",
          "account": [
            {
              "userToken": "admin_123456",
              //"CallerSource": "Internal",
              "userInfo": {
                "name": "超级管理员",
                "入口": "Gover网关"
              }
            }
          ]
        }
      ]
    },

 



    /* ServiceCenter 配置,可不指定 */
    "ServiceCenter": {

      /* 是否 输出Api注册事件到（Info）Log文件。默认:true  */
      "ApiRegistEvent_Print": true
    }

  } 

}
